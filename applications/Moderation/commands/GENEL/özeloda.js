const { Client, Message, Util, MessageActionRow, MessageButton, MessageSelectMenu, Collection, Permissions} = Discord = require("discord.js");
const { richEmbed } = require("../../../../base/Funksiyonlar/embed.js");
const voiceCollection = new Collection()
const GUILDS_SETTINGS = require('../../../../database/Schemas/Global.Guild.Settings');
const Users = require('../../../../database/Schemas/Client.Users');
const Private = require('../../../../database/Schemas/Plugins/Guild.Private.Rooms.js');
const {VoiceChannels, TextChannels, CategoryChannels, Roles} = require("../../../../database/Schemas/Guards/Backup/Guild.Sync");
let vkKategori = "1008826074592968779"
let dcKategori = "1008826046105260113"
let aktiviteKategori = "964168000997572678"
const { 
  Modal,
  TextInputComponent, 
  showModal
} = dcmodal = require('discord-modals')

module.exports = {
    name: "komut",
    command: ["komutcuk","Ã¶zeloda"],
    aliases: "",
    description: "",
    category: "-",
    uzantÄ±: true,
    
   /**
   * @param {Client} client 
   */
  Ã¶nClient: function (client) {},
   /**
   * @param {Client} client 
   * @param {Message} message 
   * @param {Array<String>} args 
   */

   komutClient: async function (client, message, args) {
    let Row = new MessageActionRow().addComponents(
      new MessageButton()
      .setCustomId("Ã¶zelOdaOluÅŸtur")
      .setLabel("Ã–zel Oda OluÅŸtur")
      .setStyle("SUCCESS")
    )
    message.channel.send({content: `**Merhaba!** Ã–zel Oda OluÅŸturma Sistemine HoÅŸ Geldiniz!

Bu kÄ±sÄ±mdan kendin belirleyeceÄŸin isimde ve senin yÃ¶neteceÄŸin bir kanal oluÅŸturabilirsin.
AyrÄ±ca bu kanala istediklerin girebilir, istemediklerini odaya almayabilirsin.

Belki odanÄ± gizli yaparak devlet sÄ±rlarÄ±nÄ± konuÅŸabilir,
Ya da herkese aÃ§Ä±k yaparak halka seslenebilirsin.

AÅŸaÄŸÄ±da bulunan "Ã–zel Oda OluÅŸtur" dÃ¼ÄŸmesine basarak oluÅŸturabilirsiniz, iyi sohbetler dilerim.`, components: [Row]})
  }
};

client.on("voiceChannelLeave", async (member, channel) => {
  let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
  if(!guild) return;
  let Data = await Private.findOne({voiceChannelId: channel.id})
  if(!Data) return;
  let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
  if(Data.permaRoom) return;
    if(sesKanalÄ± && sesKanalÄ±.members.size <= 0) { 
      await Private.deleteOne({guildID: Data.guildID, userID: Data.userID})
         sesKanalÄ±.delete().catch(err => {})
    }
  })

client.on("voiceChannelSwitch", async (member, channel, newChannel) => {
  let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
  if(!guild) return;
  let Data = await Private.findOne({voiceChannelId: channel.id})
  if(!Data) return;
  if(Data.permaRoom) return;
  let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
  if(sesKanalÄ± && sesKanalÄ±.members.size <= 0) { 
    await Private.deleteOne({guildID: Data.guildID, userID: Data.userID})
       sesKanalÄ±.delete().catch(err => {})
  }
})


client.on('modalSubmit', async (modal) => {
  if(modal.customId == "limitOzelOdacik") {
    let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
    if(!guild) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let uye = guild.members.cache.get(modal.user.id)
    if(!uye)  {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
    let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
    if(!privOdalar) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  
    let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
    if(!Data) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Bu kullanÄ±cÄ± iÃ§in Ã¶zel oda oluÅŸturma yetkisi yok.` , ephemeral: true })
    }
    let limit = parseInt(modal.getTextInputValue('name'))
    if(isNaN(limit)) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `LÃ¼tfen geÃ§erli bir sayÄ± girin.` , ephemeral: true })
    }
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) {
      sesKanalÄ±.setUserLimit(Number(limit))
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Ã–zel oda limiti baÅŸarÄ±yla deÄŸiÅŸtirildi.` , ephemeral: true })
    } else {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
  }
  if(modal.customId == "isimDegistirme") {
    let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
    if(!guild) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let uye = guild.members.cache.get(modal.user.id)
    if(!uye)  {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
    let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
    if(!privOdalar) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  
    let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
    if(!Data) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let isim = modal.getTextInputValue('name'); 
    if(!isim) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `LÃ¼tfen isim giriniz.` , ephemeral: true })
    }
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) {
      let kanalIsim = sesKanalÄ±.name.replace("ðŸ”“", "").replace("ðŸ”’", "")
      await sesKanalÄ±.setName(sesKanalÄ±.name.replace(kanalIsim, isim))
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Ã–zel oda ismi deÄŸiÅŸtirildi.` , ephemeral: true })
    } else {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
  }
  if(modal.customId == "ozelOdaBanla") {
    let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
    if(!guild) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let uye = guild.members.cache.get(modal.user.id)
    if(!uye)  {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
    let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
    if(!privOdalar) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  
    let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
    if(!Data) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Ã–zel oda oluÅŸturmadÄ±ÄŸÄ±nÄ±z iÃ§in bu iÅŸlemi yapmaya hakkÄ±nÄ±z yok.` , ephemeral: true })
    }
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let id = modal.getTextInputValue('name'); 
      let izinVerilcek = guild.members.cache.get(id)
      if(izinVerilcek) {
        if(izinVerilcek.voice && izinVerilcek.voice.channel && izinVerilcek.voice.channel.id == sesKanalÄ±.id) izinVerilcek.voice.disconnect()
        sesKanalÄ±.permissionOverwrites.delete(izinVerilcek);
        sesKanalÄ±.permissionOverwrites.create(izinVerilcek, { CONNECT: false, VIEW_CHANNEL: false });
        await modal.deferReply({ ephemeral: true })
        return await modal.followUp({content: `BaÅŸarÄ±yla "${sesKanalÄ±}" kanalÄ±nda ${izinVerilcek} Ã¼yesi yasaklandÄ±.` , ephemeral: true })
      } else {
        await modal.deferReply({ ephemeral: true })
        return await modal.followUp({content: `BelirttiÄŸiniz ID ile bir Ã¼ye eÅŸleÅŸmedi. LÃ¼tfen geÃ§erli bir ID numarasÄ± girin. ${cevaplar.prefix}` , ephemeral: true })
      }
    } else {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  }

  if(modal.customId == "ozelOdaIzin") {
    let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
    if(!guild) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let uye = guild.members.cache.get(modal.user.id)
    if(!uye)  {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
    let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
    if(!privOdalar) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  
    let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
    if(!Data) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Ã–zel oda oluÅŸturmadÄ±ÄŸÄ±nÄ±z iÃ§in bu iÅŸlemi yapmaya hakkÄ±nÄ±z yok.` , ephemeral: true })
    }
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let id = modal.getTextInputValue('name'); 
      let izinVerilcek = guild.members.cache.get(id)
      if(izinVerilcek) {
        sesKanalÄ±.permissionOverwrites.create(izinVerilcek, { CONNECT: true,  VIEW_CHANNEL: true });
        await modal.deferReply({ ephemeral: true })
        return await modal.followUp({content: `BaÅŸarÄ±yla "${sesKanalÄ±}" kanalÄ±na ${izinVerilcek} Ã¼yesi eklendi.` , ephemeral: true })
      } else {
        await modal.deferReply({ ephemeral: true })
        return await modal.followUp({content: `BelirttiÄŸiniz ID ile bir Ã¼ye eÅŸleÅŸmedi. LÃ¼tfen geÃ§erli bir ID numarasÄ± girin. ${cevaplar.prefix}` , ephemeral: true })
      }
    } else {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  }

  if(modal.customId == "ozelOdaOlusturma") {
    let guild = client.guilds.cache.get(global.sistem.SUNUCU.GUILD)
    if(!guild) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    let uye = guild.members.cache.get(modal.user.id)
    if(!uye)  {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel hata oluÅŸtu.` , ephemeral: true })
    }
    if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
    let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
    if(!privOdalar) {
      await modal.deferReply({ ephemeral: true })
      return await modal.followUp({content: `Sistemsel olarak Ã¶zel oda oluÅŸtur kapalÄ±.` , ephemeral: true })
    }
  
    let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
    
    let odaIsmi = modal.getTextInputValue('name'); 
    let odaIzin = modal.getTextInputValue('everyone');
    guild.channels.create(`${odaIzin != "HAYIR"  ? "ðŸ”“" : "ðŸ”’"} ${odaIsmi}`, {
      parent: privOdalar,
      permissionOverwrites: [{
          id: uye,
          allow: [Permissions.FLAGS.CONNECT, Permissions.FLAGS.SPEAK, Permissions.FLAGS.STREAM,Permissions.FLAGS.PRIORITY_SPEAKER,Permissions.FLAGS.MUTE_MEMBERS, Permissions.FLAGS.DEAFEN_MEMBERS, Permissions.FLAGS.MOVE_MEMBERS],
        },
      ],
      type: 'GUILD_VOICE',
    }).then(async (kanal) => {
      if(odaIzin == "HAYIR") { 
        await kanal.permissionOverwrites.edit(uye.guild.roles.everyone.id, { CONNECT: false,SPEAK: true, STREAM: true });
      } else { 
        await kanal.permissionOverwrites.edit(uye.guild.roles.everyone.id, { CONNECT: true, SPEAK: true, STREAM: true }); 
      }
      setTimeout(async () => {
        if(kanal && kanal.members.size <= 0) {
          setTimeout(async () => {
            await Private.deleteOne({guildID: guild.id, userID: uye.id})
            kanal.delete().catch(err => {})
          }, 1250)
        }
      }, 30000)

      let Row = new MessageActionRow().addComponents(
        new MessageButton()
        .setCustomId("kanalBilgisi_ozelOda")
        .setLabel("Kanal Bilgisi")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("izinVer_ozelOda")
        .setLabel("Oda Ä°zni Ver")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("yasakla_ozelOda")
        .setLabel("Odadan Yasakla")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("limit_ozelOda")
        .setLabel("Oda Limiti DÃ¼zenle")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("isimDegistir_ozelOda")
        .setLabel("OdanÄ±n Ä°smini GÃ¼ncelle")
        .setStyle("SECONDARY"),
      )
      let RowTwo = new MessageActionRow().addComponents(
        new MessageButton()
        .setCustomId("herkeseAcik_ozelOda")
        .setLabel(odaIzin != "HAYIR"  ? "Sadece Ä°zinliler'e Ayarla" : "Herkese AÃ§Ä±k Ayarla")
        .setStyle(odaIzin != "HAYIR"  ? "SECONDARY" : "PRIMARY"),
        new MessageButton()
        .setCustomId("odaIzinSÄ±fÄ±rla")
        .setLabel("Kanal Ä°zinleri Temizle")
        .setStyle("DANGER"),
        new MessageButton()
        .setCustomId("kaldÄ±r_ozelOda")
        .setLabel("KanalÄ± KaldÄ±r")
        .setStyle("DANGER"),
      )
   if(kanal) kanal.send({content : `Ã–zel Oda YÃ¶netim Paneline HoÅŸ Geldin! ${uye}

Ã–zel odanÄ±z herkese aÃ§Ä±k ise yasakladÄ±ÄŸÄ±nÄ±z Ã¼yeler dÄ±ÅŸÄ±nda herkes giriÅŸ yapabilir.
Ã–zel odanÄ±z sadece izinliler olarak ayarlandÄ±ÄŸÄ±nda izin verdiÄŸiniz herkes giriÅŸ yapabilir.`, components: [Row, RowTwo]})
      await modal.deferReply({ ephemeral: true })
      await Private.updateOne({guildID: guild.id, userID: uye.id}, {$set: {"Date": Date.now(), "voiceChannelId": kanal.id, "messageChannelId": kanal.id}}, {upsert: true});
      await Private.updateOne({guildID: guild.id, userID: uye.id}, {$set: {"Date": Date.now(), "voiceChannelId": kanal.id, "messageChannelId": kanal.id}}, {upsert: true})
      await modal.followUp({content: `Ses kanalÄ±nÄ±z baÅŸarÄ±yla oluÅŸturuldu! <#${kanal.id}> (**${odaIzin != "EVET"  ? "Sadece Ä°zinliler!" : "Herkese AÃ§Ä±k!"}**)
OluÅŸturulan kanalÄ±nÄ±zÄ± yÃ¶netmek ister misiniz? Yeni Ã¶zellikle beraber artÄ±k ses kanalÄ±nÄ±zÄ±n sohbet yerinden hem kontrol hem mikrofonu olmayan arkadaÅŸlarÄ±nÄ±zla oradan sohbet edebilirsiniz.` , ephemeral: true })
    })
  }
  
})


client.on("interactionCreate", async (i) => {
  let guild = client.guilds.cache.get(i.guild.id)
  if(!guild) return;
  let uye = guild.members.cache.get(i.user.id)
  if(!uye) return;
  if(!ayarlar) return;
  if(ayarlar && !ayarlar.Ã¶zelOdaKategorisi) return;
  let privOdalar = guild.channels.cache.get(ayarlar.Ã¶zelOdaKategorisi)
  if(!privOdalar) return;

  let Data = await Private.findOne({guildID: guild.id, userID: uye.id})
  if(i.customId == "limit_ozelOda") {
    if(!Data) return i.reply({content: `Kanal'Ä±n isimi iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let Ã¶zelOda = new Modal()
      .setCustomId('limitOzelOdacik')
      .setTitle(`${sesKanalÄ±.name.replace("ðŸ”’", "").replace("ðŸ”“","")} KanalÄ± Limiti DÃ¼zenle!`)
      .addComponents(
        new TextInputComponent()
        .setCustomId('name')
        .setLabel('Kanal Limiti')
        .setStyle('SHORT')
        .setMinLength(1)
        .setMaxLength(2)
        .setPlaceholder(`Ã–rn: 31`)
        .setRequired(true)
      );
      showModal(Ã¶zelOda, {
        client: client,
        interaction: i,
      })
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
  }

  if(i.customId == "odaIzinSÄ±fÄ±rla") {
    if(!Data) return i.reply({content: `Kanal'Ä±n isimi iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      sesKanalÄ±.permissionOverwrites.cache.filter(x => x.type == "member" && x.id != i.user.id).map(async (x) => {
        await sesKanalÄ±.permissionOverwrites.delete(x.id)
      })
      return i.reply({content: `BaÅŸarÄ±yla sen hariÃ§ tÃ¼m Ã¼yelerin izinleri ve yasaklarÄ± sÄ±fÄ±rlandÄ±.`, ephemeral: true});
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
  }

  if(i.customId == "isimDegistir_ozelOda") {
    if(!Data) return i.reply({content: `Kanal'Ä±n isimi iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let isimDegistirme = new Modal()
      .setCustomId('isimDegistirme')
      .setTitle(`${sesKanalÄ±.name.replace("ðŸ”’", "").replace("ðŸ”“","")} KanalÄ± DÃ¼zenle`)
      .addComponents(
        new TextInputComponent()
        .setCustomId('name')
        .setLabel('Kanal Ä°smi')
        .setStyle('SHORT')
        .setMinLength(2)
        .setMaxLength(32)
        .setPlaceholder(`${sesKanalÄ±.name.replace("ðŸ”’", "").replace("ðŸ”“","")}`)
        .setRequired(true)
      );
      showModal(isimDegistirme, {
        client: client,
        interaction: i,
      })
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
  }

  if(i.customId == "herkeseAcik_ozelOda") {
    if(!Data) return i.reply({content: `Kanal'Ä±n gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼ iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let Row = new MessageActionRow().addComponents(
        new MessageButton()
        .setCustomId("kanalBilgisi_ozelOda")
        .setLabel("Kanal Bilgisi")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("izinVer_ozelOda")
        .setLabel("Oda Ä°zni Ver")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("yasakla_ozelOda")
        .setLabel("Odadan Yasakla")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("limit_ozelOda")
        .setLabel("Oda Limiti DÃ¼zenle")
        .setStyle("SECONDARY"),
        new MessageButton()
        .setCustomId("isimDegistir_ozelOda")
        .setLabel("OdanÄ±n Ä°smini GÃ¼ncelle")
        .setStyle("SECONDARY"),
      )
      let RowTwo = new MessageActionRow().addComponents(
        new MessageButton()
        .setCustomId("herkeseAcik_ozelOda")
        .setLabel(sesKanalÄ±.permissionsFor(uye.guild.roles.everyone).has('CONNECT') ? "Sadece Ä°zinliler'e Ayarla" : "Herkese AÃ§Ä±k Ayarla")
        .setStyle(sesKanalÄ±.permissionsFor(uye.guild.roles.everyone).has('CONNECT') ? "SECONDARY" : "PRIMARY"),
        new MessageButton()
        .setCustomId("odaIzinSÄ±fÄ±rla")
        .setLabel("Kanal Ä°zinleri Temizle")
        .setStyle("DANGER"),
        new MessageButton()
        .setCustomId("kaldÄ±r_ozelOda")
        .setLabel("KanalÄ± KaldÄ±r")
        .setStyle("DANGER"),
      )
      if (sesKanalÄ±.permissionsFor(uye.guild.roles.everyone).has('CONNECT')) {
        await sesKanalÄ±.permissionOverwrites.edit(uye.guild.roles.everyone.id, { CONNECT: false, SPEAK: true, STREAM: true });
        sesKanalÄ±.setName(sesKanalÄ±.name.replace("ðŸ”“", "ðŸ”’"))
        RowTwo.components[0].setStyle("PRIMARY").setLabel(`Herkese AÃ§Ä±k Ayarla`)
        i.update({components: [Row, RowTwo]})
      } else {
        await sesKanalÄ±.permissionOverwrites.edit(uye.guild.roles.everyone.id, { CONNECT: true, SPEAK: true, STREAM: true });
        RowTwo.components[0].setStyle("SECONDARY").setLabel(`Sadece Ä°zinliler'e Ayarla`)
        sesKanalÄ±.setName(sesKanalÄ±.name.replace("ðŸ”’", "ðŸ”“"))
        i.update({components: [Row, RowTwo]})
      } 
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
}

  if(i.customId == "yasakla_ozelOda") {
    
    if(!Data) return i.reply({content: `Kanal'a izinli kaldÄ±rmam iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      let izinOdaBanla = new Modal()
      .setCustomId('ozelOdaBanla')
      .setTitle(`${sesKanalÄ±.name.replace("ðŸ”’", "").replace("ðŸ”“","")} KanalÄ± Yasaklama Paneli`)
      .addComponents(
        new TextInputComponent()
        .setCustomId('name')
        .setLabel('ID')
        .setStyle('SHORT')
        .setMinLength(18)
        .setMaxLength(22)
        .setPlaceholder(`ID`)
        .setRequired(true)
      );
      showModal(izinOdaBanla, {
        client: client,
        interaction: i,
      })
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
}

  if(i.customId == "izinVer_ozelOda") {
      if(!Data) return i.reply({content: `Kanal'a izinli eklemem iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
      let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
      if(sesKanalÄ±) { 
        let izinOda = new Modal()
        .setCustomId('ozelOdaIzin')
        .setTitle(`${sesKanalÄ±.name.replace("ðŸ”’", "").replace("ðŸ”“","")} KanalÄ± Ä°zin Paneli`)
        .addComponents(
          new TextInputComponent()
          .setCustomId('name')
          .setLabel('ID')
          .setStyle('SHORT')
          .setMinLength(18)
          .setMaxLength(22)
          .setPlaceholder(`ID`)
          .setRequired(true)
        );
        showModal(izinOda, {
          client: client,
          interaction: i,
        })
      } else {
        return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
      }
  }
  if(i.customId == "kaldÄ±r_ozelOda") {
    if(!Data) return i.reply({content: `Kanal'Ä± kaldÄ±rmam iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});

    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) { 
      setTimeout(async () => {
        await Private.deleteOne({guildID: guild.id, userID: uye.id})
        await sesKanalÄ±.delete().catch(err => {})
      }, 5000);
      i.reply({content: `BaÅŸarÄ±yla kanal silme iÅŸleminiz tamamlandÄ±.
5 Saniye iÃ§erisinde ${sesKanalÄ±} kanalÄ±nÄ±z silinecektir.`, ephemeral: true})
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
  }
  if(i.customId == "kanalBilgisi_ozelOda") {
    if(!Data) return i.reply({content: `Kanal bilginizi gÃ¶rÃ¼ntÃ¼leyebilmem iÃ§in bir Ã¶zel oda oluÅŸturmalÄ±sÄ±nÄ±z.`, ephemeral: true});
    let sesKanalÄ± = guild.channels.cache.get(Data.voiceChannelId)
    if(sesKanalÄ±) {
      let yasaklÄ±lar = []
      let izinliler = []
      sesKanalÄ±.permissionOverwrites.cache.filter(x => x.type == "member" && x.id != i.user.id).map(x => {
        if(sesKanalÄ±.permissionsFor(x.id) && sesKanalÄ±.permissionsFor(x.id).has("CONNECT")) {
          izinliler.push(x.id)
        } else {
          yasaklÄ±lar.push(x.id)
        }
      })

      i.reply({content: `
Ses kanalÄ±n gÃ¶rÃ¼nÃ¼rlÃ¼ÄŸÃ¼: **${sesKanalÄ±.permissionsFor(uye.guild.roles.everyone).has('CONNECT') ? "Herkese AÃ§Ä±k!" : "Sadece Ä°zinliler!"}**
OluÅŸturulma tarihi: <t:${String(Data.Date).slice(0, 10)}:F> (<t:${String(Data.Date).slice(0, 10)}:R>)

Ses kanalÄ±nda izinliler:
${izinliler.length > 0 ? izinliler.map(x => `> ${uye.guild.members.cache.get(x)} (\`${x}\`)`).join("\n") : "Ä°zinli bulunamadÄ±!"}

Ses kanalÄ±nda yasaklÄ±lar:
${yasaklÄ±lar.length > 0 ? yasaklÄ±lar.map(x => `> ${uye.guild.members.cache.get(x)} (\`${x}\`)`).join("\n") : "YasaklÄ± bulunamadÄ±!"}

`, ephemeral: true})
    } else {
      return i.reply({content: `Sistemsel bir hata oluÅŸtu, lÃ¼tfen yÃ¶neticilere baÅŸvurun.`, ephemeral: true});
    }
  }

  const modal = new Modal()
  .setCustomId('ozelOdaOlusturma')
  .setTitle('Ã–zel Oda OluÅŸturma')
  .addComponents(
    new TextInputComponent()
    .setCustomId('name')
    .setLabel('Oda Ä°smi Giriniz!')
    .setStyle('SHORT')
    .setMinLength(3)
    .setMaxLength(60)
    .setRequired(true),
    new TextInputComponent()
    .setCustomId('everyone')
    .setLabel('SES HERKESE AÃ‡IK MI? (EVET/HAYIR)')
    .setStyle('SHORT')
    .setMinLength(1)
    .setMaxLength(10)
    .setPlaceholder('Sadece "EVET" veya "HAYIR" yazÄ±n.')
    .setRequired(true),
  );
  if(i.customId == "Ã¶zelOdaOluÅŸtur") {
    if(Data) return i.reply({content: `Aktif bir Ã¶zel odanÄ±z olduÄŸundan dolayÄ± bir Ã¶zel oda oluÅŸturmazsÄ±nÄ±z.`, ephemeral: true});
    showModal(modal, {
      client: client,
      interaction: i 
    })
  }
})

function baÅŸHarfBÃ¼yÃ¼lt(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}

async function voiceKur(idcik, message, embed) {
    let sesKurma = await VoiceChannels.find({ parentID: idcik })
    if(sesKurma) {
      sesKurma.forEach(async (data) => {
         message.guild.channels.create(data.name, {
          type: 'GUILD_VOICE',
          bitrate: data.bitrate,
          parentId: idcik,
          position: data.position,
          userLimit: data.userLimit ? data.userLimit : 0
        }).then(async (gg) => {
          await gg.setParent(idcik)
        })
      })
    }
}

async function textKur(idcik, message, embed) {
  let metinkurma = await TextChannels.find({ parentID: idcik })
  if(metinkurma) {
    metinkurma.forEach(async (data) => {
      await message.guild.channels.create(data.name, {
        type: 'GUILD_TEXT',
        nsfw: data.nsfw,
        parentId: idcik,
        position: data.position,
        rateLimit: data.rateLimit,
      }).then(async (gg) => {
        await gg.setParent(idcik)
      });
    })
  }
}



